// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: bank.proto

package bank_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankClient is the client API for Bank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	AccountTopUp(ctx context.Context, in *AccountTopUpRequest, opts ...grpc.CallOption) (*AccountTopUpResponse, error)
	AccountWithdraw(ctx context.Context, in *AccountWithdrawRequest, opts ...grpc.CallOption) (*AccountWithdrawResponse, error)
	AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*AccountTransferResponse, error)
	AccountLock(ctx context.Context, in *AccountLockRequest, opts ...grpc.CallOption) (*AccountLockResponse, error)
}

type bankClient struct {
	cc grpc.ClientConnInterface
}

func NewBankClient(cc grpc.ClientConnInterface) BankClient {
	return &bankClient{cc}
}

func (c *bankClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) AccountTopUp(ctx context.Context, in *AccountTopUpRequest, opts ...grpc.CallOption) (*AccountTopUpResponse, error) {
	out := new(AccountTopUpResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/AccountTopUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) AccountWithdraw(ctx context.Context, in *AccountWithdrawRequest, opts ...grpc.CallOption) (*AccountWithdrawResponse, error) {
	out := new(AccountWithdrawResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/AccountWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*AccountTransferResponse, error) {
	out := new(AccountTransferResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/AccountTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankClient) AccountLock(ctx context.Context, in *AccountLockRequest, opts ...grpc.CallOption) (*AccountLockResponse, error) {
	out := new(AccountLockResponse)
	err := c.cc.Invoke(ctx, "/bank.Bank/AccountLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServer is the server API for Bank service.
// All implementations must embed UnimplementedBankServer
// for forward compatibility
type BankServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	AccountTopUp(context.Context, *AccountTopUpRequest) (*AccountTopUpResponse, error)
	AccountWithdraw(context.Context, *AccountWithdrawRequest) (*AccountWithdrawResponse, error)
	AccountTransfer(context.Context, *AccountTransferRequest) (*AccountTransferResponse, error)
	AccountLock(context.Context, *AccountLockRequest) (*AccountLockResponse, error)
	mustEmbedUnimplementedBankServer()
}

// UnimplementedBankServer must be embedded to have forward compatible implementations.
type UnimplementedBankServer struct {
}

func (UnimplementedBankServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedBankServer) AccountTopUp(context.Context, *AccountTopUpRequest) (*AccountTopUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountTopUp not implemented")
}
func (UnimplementedBankServer) AccountWithdraw(context.Context, *AccountWithdrawRequest) (*AccountWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWithdraw not implemented")
}
func (UnimplementedBankServer) AccountTransfer(context.Context, *AccountTransferRequest) (*AccountTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountTransfer not implemented")
}
func (UnimplementedBankServer) AccountLock(context.Context, *AccountLockRequest) (*AccountLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLock not implemented")
}
func (UnimplementedBankServer) mustEmbedUnimplementedBankServer() {}

// UnsafeBankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServer will
// result in compilation errors.
type UnsafeBankServer interface {
	mustEmbedUnimplementedBankServer()
}

func RegisterBankServer(s grpc.ServiceRegistrar, srv BankServer) {
	s.RegisterService(&Bank_ServiceDesc, srv)
}

func _Bank_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_AccountTopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).AccountTopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/AccountTopUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).AccountTopUp(ctx, req.(*AccountTopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_AccountWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).AccountWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/AccountWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).AccountWithdraw(ctx, req.(*AccountWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_AccountTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).AccountTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/AccountTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).AccountTransfer(ctx, req.(*AccountTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bank_AccountLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServer).AccountLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.Bank/AccountLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServer).AccountLock(ctx, req.(*AccountLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bank_ServiceDesc is the grpc.ServiceDesc for Bank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.Bank",
	HandlerType: (*BankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Bank_CreateAccount_Handler,
		},
		{
			MethodName: "AccountTopUp",
			Handler:    _Bank_AccountTopUp_Handler,
		},
		{
			MethodName: "AccountWithdraw",
			Handler:    _Bank_AccountWithdraw_Handler,
		},
		{
			MethodName: "AccountTransfer",
			Handler:    _Bank_AccountTransfer_Handler,
		},
		{
			MethodName: "AccountLock",
			Handler:    _Bank_AccountLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}
